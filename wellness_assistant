# wellness_assistant.py
import os
from datetime import datetime
from groq import Groq
from gtts import gTTS
import matplotlib.pyplot as plt

# --- API Setup ---
API_KEY = os.getenv("GROQ_API_KEY")
client = Groq(api_key=API_KEY)

# --- Global Storage ---
reminders = []
progress = {"mood": [], "fitness": [], "meditation": []}
attendance_log = []  # check-in / check-out log

# --- Core AI Query Function ---
def query_gemma2(prompt, model="gemma2-9b-it"):
    response = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model=model,
    )
    return response.choices[0].message.content

# --- Features ---
def analyze_mood(user_input):
    prompt = f"Analyze the mood from the following input and provide suggestions: '{user_input}'"
    response = query_gemma2(prompt)
    progress["mood"].append((user_input, response))
    return response

def generate_fitness_plan(user_input):
    prompt = f"Generate a personalized fitness plan based on this input: '{user_input}'"
    response = query_gemma2(prompt)
    progress["fitness"].append((user_input, response))
    return response

def voice_guided_meditation():
    prompt = "Provide relaxation techniques for guided meditation."
    response = query_gemma2(prompt)
    tts = gTTS(text=response, lang="en")
    audio_file = "meditation.mp3"
    tts.save(audio_file)
    progress["meditation"].append(response)
    return response, audio_file

def set_reminder(reminder_text, time):
    reminder = {"text": reminder_text, "time": time}
    reminders.append(reminder)
    return f"Reminder set: '{reminder_text}' at {time}"

def show_progress():
    labels = ["Mood", "Fitness", "Meditation"]
    values = [len(progress["mood"]), len(progress["fitness"]), len(progress["meditation"])]
    return labels, values

# --- Attendance (Check-in/Checkout) ---
def check_in(user="Employee"):
    time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    attendance_log.append({"user": user, "action": "Check-in", "time": time})
    return f"âœ… {user} checked in at {time}"

def check_out(user="Employee"):
    time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    attendance_log.append({"user": user, "action": "Check-out", "time": time})
    return f"ðŸ‘‹ {user} checked out at {time}"

# --- Request Classification ---
def classify_request(user_input):
    categories = {
        "leave": ["leave", "vacation", "holiday"],
        "travel": ["travel", "trip", "ticket"],
        "resignation": ["resign", "quit", "exit"],
        "expense": ["expense", "reimbursement"],
    }
    for cat, keywords in categories.items():
        if any(word in user_input.lower() for word in keywords):
            return cat
    return "general"
