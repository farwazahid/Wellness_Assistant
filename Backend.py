# -*- coding: utf-8 -*-
"""Wellness Assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQbbhZFPuVMrY5sC05-2MbKM5MheYR0b
"""

import os
os.environ["GROQ_API_KEY"] = "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" 

from groq import Groq

API_KEY = os.getenv("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")  # ðŸ‘ˆ now it fetches the key
client = Groq(api_key=API_KEY)

response = client.chat.completions.create(
    model="gemma2-9b-it",
    messages=[{"role": "user", "content": "Hello, can you give me a short meditation tip?"}]
)

print(response.choices[0].message.content)

# --- Imports ---
import os
from groq import Groq
from gtts import gTTS
import matplotlib.pyplot as plt

# --- API Setup ---
# Replace with your real API key
os.environ["GROQ_API_KEY"] = "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"
API_KEY = os.getenv("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")

client = Groq(api_key=API_KEY)

# --- Global storage ---
reminders = []
progress = {"mood": [], "fitness": [], "meditation": []}

# --- Core AI Query Function ---
def query_gemma2(prompt, model="gemma2-9b-it"):
    response = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model=model,
    )
    return response.choices[0].message.content

# --- Features ---
def analyze_mood(user_input):
    prompt = f"Analyze the mood from the following input and provide suggestions: '{user_input}'"
    response = query_gemma2(prompt)
    progress["mood"].append((user_input, response))
    return response

def generate_fitness_plan(user_input):
    prompt = f"Generate a personalized fitness plan based on this input: '{user_input}'"
    response = query_gemma2(prompt)
    progress["fitness"].append((user_input, response))
    return response

def voice_guided_meditation():
    prompt = "Provide relaxation techniques for guided meditation."
    response = query_gemma2(prompt)
    tts = gTTS(text=response, lang="en")
    audio_file = "meditation.mp3"
    tts.save(audio_file)
    progress["meditation"].append(response)
    return response, audio_file

def set_reminder(reminder_text, time):
    reminder = {"text": reminder_text, "time": time}
    reminders.append(reminder)
    return f"Reminder set: '{reminder_text}' at {time}"

def show_progress():
    labels = ["Mood", "Fitness", "Meditation"]
    values = [len(progress["mood"]), len(progress["fitness"]), len(progress["meditation"])]
    fig, ax = plt.subplots()
    ax.bar(labels, values, color=["#ff9999", "#66b3ff", "#99ff99"])
    ax.set_title("Progress Overview")
    ax.set_ylabel("Number of Activities")
    plt.show()

# --- Chatbot Loop ---
print("ðŸ’¬ Health Assistant Chatbot (type 'exit' to quit)\n")
while True:
    user_input = input("You: ")
    if user_input.lower() in ["exit", "quit"]:
        print("ðŸ‘‹ Chat ended.")
        break

    if "mood" in user_input.lower():
        reply = analyze_mood(user_input)
    elif "fitness" in user_input.lower():
        reply = generate_fitness_plan(user_input)
    elif "meditate" in user_input.lower():
        reply, audio_file = voice_guided_meditation()
    elif "remind" in user_input.lower():
        reply = set_reminder("Take medicine", "8 PM")
    elif "progress" in user_input.lower():
        show_progress()
        reply = "ðŸ“Š Hereâ€™s your progress."
    else:
        reply = query_gemma2(user_input)

    print("Bot:", reply)
